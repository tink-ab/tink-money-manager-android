apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

group GROUP   // Maven Group ID for the artifact
version TinkPfmVersion.name

def aarPath(projectName) {
    def fallback = "build/outputs/aar/" + projectName + "-release.aar"
    if (POM_PACKAGING == 'jar') {
        fallback = "build/libs/" + projectName + "-" + this.version + ".jar"
    }
    return hasProperty('ARTIFACT_PATH') ? ARTIFACT_PATH : fallback
}

def pfmArtifactId(projectName) {
    def fallback = projectName
    return hasProperty('ARTIFACT_ID') && project.name == projectName ? ARTIFACT_ID : fallback
}

def pfmBintrayName(projectName) {
    def fallback = GROUP + "." + pfmArtifactId(projectName) // TODO: What should these names be?
    return hasProperty('BINTRAY_NAME') ? BINTRAY_NAME : fallback
}

publishing {
    publications {
        tinkPfmSdk(MavenPublication) {
            artifact aarPath(project.name)

            groupId GROUP // TODO: Not set in Tink Link

            artifactId pfmArtifactId(project.name)
            version this.version

            pom {
                name = "Tink PFM UI " + project.name
                packaging = POM_PACKAGING
                description = POM_DESCRIPTION

                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                    }
                }

                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        if (it instanceof ProjectDependency) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            // Internal modules. Use the names of the generated public aars.
                            dependencyNode.appendNode('groupId', GROUP)
                            dependencyNode.appendNode('artifactId', pfmArtifactId(it.name))
                            dependencyNode.appendNode('version', TinkPfmVersion.name)
                        } else if(it instanceof ExternalModuleDependency) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
}

// Bintray
def bintray_username = hasProperty('BINTRAY_USER') ? BINTRAY_USER : ""
def bintray_apikey = hasProperty('BINTRAY_APIKEY') ? BINTRAY_APIKEY : ""

bintray {
    user = bintray_username
    key = bintray_apikey

    setPublications('tinkPfmSdk')
    setConfigurations('archives')
    pkg {
        userOrg = 'tink'
        repo = BINTRAY_REPO
        name = pfmBintrayName(project.name)
        desc = POM_DESCRIPTION
//        websiteUrl = POM_URL
        vcsUrl = POM_GIT_URL
        licenses = [POM_LICENSE]
        publish = false
        publicDownloadNumbers = true

        version {
            desc = POM_DESCRIPTION
//            gpg {
//                sign = true //Determines whether to GPG sign the files. The default is false
//                passphrase = properties.getProperty("bintray.gpg.password")
//                //Optional. The passphrase for GPG signing'
//            }
        }
    }
}